/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.32.0
 * source: verification.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace verification {
    export enum CredentialStatus {
        STATUS_UNSPECIFIED = 0,
        ACTIVE = 1,
        SUSPENDED = 2,
        EXPIRED = 3,
        REVOKED = 4
    }
    export class Credential extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential_id?: string;
            license_number?: string;
            exam_id?: string;
            issue_date?: dependency_1.google.protobuf.Timestamp;
            expiry_date?: dependency_1.google.protobuf.Timestamp;
            status?: CredentialStatus;
            issuer_id?: string;
            updated_at?: dependency_1.google.protobuf.Timestamp;
            holder_info?: HolderInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential_id" in data && data.credential_id != undefined) {
                    this.credential_id = data.credential_id;
                }
                if ("license_number" in data && data.license_number != undefined) {
                    this.license_number = data.license_number;
                }
                if ("exam_id" in data && data.exam_id != undefined) {
                    this.exam_id = data.exam_id;
                }
                if ("issue_date" in data && data.issue_date != undefined) {
                    this.issue_date = data.issue_date;
                }
                if ("expiry_date" in data && data.expiry_date != undefined) {
                    this.expiry_date = data.expiry_date;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("issuer_id" in data && data.issuer_id != undefined) {
                    this.issuer_id = data.issuer_id;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
                if ("holder_info" in data && data.holder_info != undefined) {
                    this.holder_info = data.holder_info;
                }
            }
        }
        get credential_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set credential_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get license_number() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set license_number(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get exam_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set exam_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get issue_date() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set issue_date(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_issue_date() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get expiry_date() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set expiry_date(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_expiry_date() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 6, CredentialStatus.STATUS_UNSPECIFIED) as CredentialStatus;
        }
        set status(value: CredentialStatus) {
            pb_1.Message.setField(this, 6, value);
        }
        get issuer_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set issuer_id(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get updated_at() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 8) as dependency_1.google.protobuf.Timestamp;
        }
        set updated_at(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_updated_at() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get holder_info() {
            return pb_1.Message.getWrapperField(this, HolderInfo, 9) as HolderInfo;
        }
        set holder_info(value: HolderInfo) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_holder_info() {
            return pb_1.Message.getField(this, 9) != null;
        }
        static fromObject(data: {
            credential_id?: string;
            license_number?: string;
            exam_id?: string;
            issue_date?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            expiry_date?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            status?: CredentialStatus;
            issuer_id?: string;
            updated_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            holder_info?: ReturnType<typeof HolderInfo.prototype.toObject>;
        }): Credential {
            const message = new Credential({});
            if (data.credential_id != null) {
                message.credential_id = data.credential_id;
            }
            if (data.license_number != null) {
                message.license_number = data.license_number;
            }
            if (data.exam_id != null) {
                message.exam_id = data.exam_id;
            }
            if (data.issue_date != null) {
                message.issue_date = dependency_1.google.protobuf.Timestamp.fromObject(data.issue_date);
            }
            if (data.expiry_date != null) {
                message.expiry_date = dependency_1.google.protobuf.Timestamp.fromObject(data.expiry_date);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.issuer_id != null) {
                message.issuer_id = data.issuer_id;
            }
            if (data.updated_at != null) {
                message.updated_at = dependency_1.google.protobuf.Timestamp.fromObject(data.updated_at);
            }
            if (data.holder_info != null) {
                message.holder_info = HolderInfo.fromObject(data.holder_info);
            }
            return message;
        }
        toObject() {
            const data: {
                credential_id?: string;
                license_number?: string;
                exam_id?: string;
                issue_date?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                expiry_date?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                status?: CredentialStatus;
                issuer_id?: string;
                updated_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                holder_info?: ReturnType<typeof HolderInfo.prototype.toObject>;
            } = {};
            if (this.credential_id != null) {
                data.credential_id = this.credential_id;
            }
            if (this.license_number != null) {
                data.license_number = this.license_number;
            }
            if (this.exam_id != null) {
                data.exam_id = this.exam_id;
            }
            if (this.issue_date != null) {
                data.issue_date = this.issue_date.toObject();
            }
            if (this.expiry_date != null) {
                data.expiry_date = this.expiry_date.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.issuer_id != null) {
                data.issuer_id = this.issuer_id;
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at.toObject();
            }
            if (this.holder_info != null) {
                data.holder_info = this.holder_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.credential_id.length)
                writer.writeString(1, this.credential_id);
            if (this.license_number.length)
                writer.writeString(2, this.license_number);
            if (this.exam_id.length)
                writer.writeString(3, this.exam_id);
            if (this.has_issue_date)
                writer.writeMessage(4, this.issue_date, () => this.issue_date.serialize(writer));
            if (this.has_expiry_date)
                writer.writeMessage(5, this.expiry_date, () => this.expiry_date.serialize(writer));
            if (this.status != CredentialStatus.STATUS_UNSPECIFIED)
                writer.writeEnum(6, this.status);
            if (this.issuer_id.length)
                writer.writeString(7, this.issuer_id);
            if (this.has_updated_at)
                writer.writeMessage(8, this.updated_at, () => this.updated_at.serialize(writer));
            if (this.has_holder_info)
                writer.writeMessage(9, this.holder_info, () => this.holder_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Credential {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Credential();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.credential_id = reader.readString();
                        break;
                    case 2:
                        message.license_number = reader.readString();
                        break;
                    case 3:
                        message.exam_id = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.issue_date, () => message.issue_date = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.expiry_date, () => message.expiry_date = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        message.status = reader.readEnum();
                        break;
                    case 7:
                        message.issuer_id = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.updated_at, () => message.updated_at = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.holder_info, () => message.holder_info = HolderInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Credential {
            return Credential.deserialize(bytes);
        }
    }
    export class HolderInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            first_name?: string;
            last_name?: string;
            date_of_birth?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("first_name" in data && data.first_name != undefined) {
                    this.first_name = data.first_name;
                }
                if ("last_name" in data && data.last_name != undefined) {
                    this.last_name = data.last_name;
                }
                if ("date_of_birth" in data && data.date_of_birth != undefined) {
                    this.date_of_birth = data.date_of_birth;
                }
            }
        }
        get first_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set first_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get last_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set last_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get date_of_birth() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set date_of_birth(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            first_name?: string;
            last_name?: string;
            date_of_birth?: string;
        }): HolderInfo {
            const message = new HolderInfo({});
            if (data.first_name != null) {
                message.first_name = data.first_name;
            }
            if (data.last_name != null) {
                message.last_name = data.last_name;
            }
            if (data.date_of_birth != null) {
                message.date_of_birth = data.date_of_birth;
            }
            return message;
        }
        toObject() {
            const data: {
                first_name?: string;
                last_name?: string;
                date_of_birth?: string;
            } = {};
            if (this.first_name != null) {
                data.first_name = this.first_name;
            }
            if (this.last_name != null) {
                data.last_name = this.last_name;
            }
            if (this.date_of_birth != null) {
                data.date_of_birth = this.date_of_birth;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.first_name.length)
                writer.writeString(1, this.first_name);
            if (this.last_name.length)
                writer.writeString(2, this.last_name);
            if (this.date_of_birth.length)
                writer.writeString(3, this.date_of_birth);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HolderInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HolderInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.first_name = reader.readString();
                        break;
                    case 2:
                        message.last_name = reader.readString();
                        break;
                    case 3:
                        message.date_of_birth = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HolderInfo {
            return HolderInfo.deserialize(bytes);
        }
    }
    export class VerificationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3, 4]];
        constructor(data?: any[] | ({
            exam_id?: string;
        } & (({
            credential_id?: string;
            license_number?: never;
            personal_info?: never;
        } | {
            credential_id?: never;
            license_number?: string;
            personal_info?: never;
        } | {
            credential_id?: never;
            license_number?: never;
            personal_info?: HolderInfo;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("exam_id" in data && data.exam_id != undefined) {
                    this.exam_id = data.exam_id;
                }
                if ("credential_id" in data && data.credential_id != undefined) {
                    this.credential_id = data.credential_id;
                }
                if ("license_number" in data && data.license_number != undefined) {
                    this.license_number = data.license_number;
                }
                if ("personal_info" in data && data.personal_info != undefined) {
                    this.personal_info = data.personal_info;
                }
            }
        }
        get exam_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set exam_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get credential_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set credential_id(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_credential_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get license_number() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set license_number(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_license_number() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get personal_info() {
            return pb_1.Message.getWrapperField(this, HolderInfo, 4) as HolderInfo;
        }
        set personal_info(value: HolderInfo) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_personal_info() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get verification_method() {
            const cases: {
                [index: number]: "none" | "credential_id" | "license_number" | "personal_info";
            } = {
                0: "none",
                2: "credential_id",
                3: "license_number",
                4: "personal_info"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4])];
        }
        static fromObject(data: {
            exam_id?: string;
            credential_id?: string;
            license_number?: string;
            personal_info?: ReturnType<typeof HolderInfo.prototype.toObject>;
        }): VerificationRequest {
            const message = new VerificationRequest({});
            if (data.exam_id != null) {
                message.exam_id = data.exam_id;
            }
            if (data.credential_id != null) {
                message.credential_id = data.credential_id;
            }
            if (data.license_number != null) {
                message.license_number = data.license_number;
            }
            if (data.personal_info != null) {
                message.personal_info = HolderInfo.fromObject(data.personal_info);
            }
            return message;
        }
        toObject() {
            const data: {
                exam_id?: string;
                credential_id?: string;
                license_number?: string;
                personal_info?: ReturnType<typeof HolderInfo.prototype.toObject>;
            } = {};
            if (this.exam_id != null) {
                data.exam_id = this.exam_id;
            }
            if (this.credential_id != null) {
                data.credential_id = this.credential_id;
            }
            if (this.license_number != null) {
                data.license_number = this.license_number;
            }
            if (this.personal_info != null) {
                data.personal_info = this.personal_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.exam_id.length)
                writer.writeString(1, this.exam_id);
            if (this.has_credential_id)
                writer.writeString(2, this.credential_id);
            if (this.has_license_number)
                writer.writeString(3, this.license_number);
            if (this.has_personal_info)
                writer.writeMessage(4, this.personal_info, () => this.personal_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerificationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerificationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.exam_id = reader.readString();
                        break;
                    case 2:
                        message.credential_id = reader.readString();
                        break;
                    case 3:
                        message.license_number = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.personal_info, () => message.personal_info = HolderInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerificationRequest {
            return VerificationRequest.deserialize(bytes);
        }
    }
    export class VerificationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            verified?: boolean;
            verification_timestamp?: dependency_1.google.protobuf.Timestamp;
            error_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("verified" in data && data.verified != undefined) {
                    this.verified = data.verified;
                }
                if ("verification_timestamp" in data && data.verification_timestamp != undefined) {
                    this.verification_timestamp = data.verification_timestamp;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
            }
        }
        get verified() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set verified(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get verification_timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 2) as dependency_1.google.protobuf.Timestamp;
        }
        set verification_timestamp(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_verification_timestamp() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            verified?: boolean;
            verification_timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            error_message?: string;
        }): VerificationResponse {
            const message = new VerificationResponse({});
            if (data.verified != null) {
                message.verified = data.verified;
            }
            if (data.verification_timestamp != null) {
                message.verification_timestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.verification_timestamp);
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            return message;
        }
        toObject() {
            const data: {
                verified?: boolean;
                verification_timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                error_message?: string;
            } = {};
            if (this.verified != null) {
                data.verified = this.verified;
            }
            if (this.verification_timestamp != null) {
                data.verification_timestamp = this.verification_timestamp.toObject();
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.verified != false)
                writer.writeBool(1, this.verified);
            if (this.has_verification_timestamp)
                writer.writeMessage(2, this.verification_timestamp, () => this.verification_timestamp.serialize(writer));
            if (this.error_message.length)
                writer.writeString(3, this.error_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerificationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerificationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.verified = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.verification_timestamp, () => message.verification_timestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 3:
                        message.error_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerificationResponse {
            return VerificationResponse.deserialize(bytes);
        }
    }
    export class BatchVerificationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            requests?: VerificationRequest[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("requests" in data && data.requests != undefined) {
                    this.requests = data.requests;
                }
            }
        }
        get requests() {
            return pb_1.Message.getRepeatedWrapperField(this, VerificationRequest, 1) as VerificationRequest[];
        }
        set requests(value: VerificationRequest[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            requests?: ReturnType<typeof VerificationRequest.prototype.toObject>[];
        }): BatchVerificationRequest {
            const message = new BatchVerificationRequest({});
            if (data.requests != null) {
                message.requests = data.requests.map(item => VerificationRequest.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                requests?: ReturnType<typeof VerificationRequest.prototype.toObject>[];
            } = {};
            if (this.requests != null) {
                data.requests = this.requests.map((item: VerificationRequest) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.requests.length)
                writer.writeRepeatedMessage(1, this.requests, (item: VerificationRequest) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchVerificationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchVerificationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.requests, () => pb_1.Message.addToRepeatedWrapperField(message, 1, VerificationRequest.deserialize(reader), VerificationRequest));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchVerificationRequest {
            return BatchVerificationRequest.deserialize(bytes);
        }
    }
    export class BatchVerificationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            responses?: VerificationResponse[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("responses" in data && data.responses != undefined) {
                    this.responses = data.responses;
                }
            }
        }
        get responses() {
            return pb_1.Message.getRepeatedWrapperField(this, VerificationResponse, 1) as VerificationResponse[];
        }
        set responses(value: VerificationResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            responses?: ReturnType<typeof VerificationResponse.prototype.toObject>[];
        }): BatchVerificationResponse {
            const message = new BatchVerificationResponse({});
            if (data.responses != null) {
                message.responses = data.responses.map(item => VerificationResponse.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                responses?: ReturnType<typeof VerificationResponse.prototype.toObject>[];
            } = {};
            if (this.responses != null) {
                data.responses = this.responses.map((item: VerificationResponse) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.responses.length)
                writer.writeRepeatedMessage(1, this.responses, (item: VerificationResponse) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchVerificationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchVerificationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.responses, () => pb_1.Message.addToRepeatedWrapperField(message, 1, VerificationResponse.deserialize(reader), VerificationResponse));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchVerificationResponse {
            return BatchVerificationResponse.deserialize(bytes);
        }
    }
    export class CredentialStatusRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential_id" in data && data.credential_id != undefined) {
                    this.credential_id = data.credential_id;
                }
            }
        }
        get credential_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set credential_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            credential_id?: string;
        }): CredentialStatusRequest {
            const message = new CredentialStatusRequest({});
            if (data.credential_id != null) {
                message.credential_id = data.credential_id;
            }
            return message;
        }
        toObject() {
            const data: {
                credential_id?: string;
            } = {};
            if (this.credential_id != null) {
                data.credential_id = this.credential_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.credential_id.length)
                writer.writeString(1, this.credential_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CredentialStatusRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CredentialStatusRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.credential_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CredentialStatusRequest {
            return CredentialStatusRequest.deserialize(bytes);
        }
    }
    export class CredentialStatusResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential_id?: string;
            status?: CredentialStatus;
            renewal_deadline?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential_id" in data && data.credential_id != undefined) {
                    this.credential_id = data.credential_id;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("renewal_deadline" in data && data.renewal_deadline != undefined) {
                    this.renewal_deadline = data.renewal_deadline;
                }
            }
        }
        get credential_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set credential_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, CredentialStatus.STATUS_UNSPECIFIED) as CredentialStatus;
        }
        set status(value: CredentialStatus) {
            pb_1.Message.setField(this, 2, value);
        }
        get renewal_deadline() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 3) as dependency_1.google.protobuf.Timestamp;
        }
        set renewal_deadline(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_renewal_deadline() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            credential_id?: string;
            status?: CredentialStatus;
            renewal_deadline?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): CredentialStatusResponse {
            const message = new CredentialStatusResponse({});
            if (data.credential_id != null) {
                message.credential_id = data.credential_id;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.renewal_deadline != null) {
                message.renewal_deadline = dependency_1.google.protobuf.Timestamp.fromObject(data.renewal_deadline);
            }
            return message;
        }
        toObject() {
            const data: {
                credential_id?: string;
                status?: CredentialStatus;
                renewal_deadline?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.credential_id != null) {
                data.credential_id = this.credential_id;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.renewal_deadline != null) {
                data.renewal_deadline = this.renewal_deadline.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.credential_id.length)
                writer.writeString(1, this.credential_id);
            if (this.status != CredentialStatus.STATUS_UNSPECIFIED)
                writer.writeEnum(2, this.status);
            if (this.has_renewal_deadline)
                writer.writeMessage(3, this.renewal_deadline, () => this.renewal_deadline.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CredentialStatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CredentialStatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.credential_id = reader.readString();
                        break;
                    case 2:
                        message.status = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.renewal_deadline, () => message.renewal_deadline = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CredentialStatusResponse {
            return CredentialStatusResponse.deserialize(bytes);
        }
    }
    export class SearchRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({
            exam_id?: string;
        } & (({
            name?: string;
            license_number?: never;
            credential_id?: never;
        } | {
            name?: never;
            license_number?: string;
            credential_id?: never;
        } | {
            name?: never;
            license_number?: never;
            credential_id?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("license_number" in data && data.license_number != undefined) {
                    this.license_number = data.license_number;
                }
                if ("credential_id" in data && data.credential_id != undefined) {
                    this.credential_id = data.credential_id;
                }
                if ("exam_id" in data && data.exam_id != undefined) {
                    this.exam_id = data.exam_id;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get license_number() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set license_number(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_license_number() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get credential_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set credential_id(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_credential_id() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get exam_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set exam_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get search_criteria() {
            const cases: {
                [index: number]: "none" | "name" | "license_number" | "credential_id";
            } = {
                0: "none",
                1: "name",
                2: "license_number",
                3: "credential_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            name?: string;
            license_number?: string;
            credential_id?: string;
            exam_id?: string;
        }): SearchRequest {
            const message = new SearchRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.license_number != null) {
                message.license_number = data.license_number;
            }
            if (data.credential_id != null) {
                message.credential_id = data.credential_id;
            }
            if (data.exam_id != null) {
                message.exam_id = data.exam_id;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                license_number?: string;
                credential_id?: string;
                exam_id?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.license_number != null) {
                data.license_number = this.license_number;
            }
            if (this.credential_id != null) {
                data.credential_id = this.credential_id;
            }
            if (this.exam_id != null) {
                data.exam_id = this.exam_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_name)
                writer.writeString(1, this.name);
            if (this.has_license_number)
                writer.writeString(2, this.license_number);
            if (this.has_credential_id)
                writer.writeString(3, this.credential_id);
            if (this.exam_id.length)
                writer.writeString(4, this.exam_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.license_number = reader.readString();
                        break;
                    case 3:
                        message.credential_id = reader.readString();
                        break;
                    case 4:
                        message.exam_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchRequest {
            return SearchRequest.deserialize(bytes);
        }
    }
    export class SearchResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credentials?: Credential[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credentials" in data && data.credentials != undefined) {
                    this.credentials = data.credentials;
                }
            }
        }
        get credentials() {
            return pb_1.Message.getRepeatedWrapperField(this, Credential, 1) as Credential[];
        }
        set credentials(value: Credential[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            credentials?: ReturnType<typeof Credential.prototype.toObject>[];
        }): SearchResponse {
            const message = new SearchResponse({});
            if (data.credentials != null) {
                message.credentials = data.credentials.map(item => Credential.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                credentials?: ReturnType<typeof Credential.prototype.toObject>[];
            } = {};
            if (this.credentials != null) {
                data.credentials = this.credentials.map((item: Credential) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.credentials.length)
                writer.writeRepeatedMessage(1, this.credentials, (item: Credential) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.credentials, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Credential.deserialize(reader), Credential));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchResponse {
            return SearchResponse.deserialize(bytes);
        }
    }
    export class DocumentVerificationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            document_hash?: string;
            credential_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("document_hash" in data && data.document_hash != undefined) {
                    this.document_hash = data.document_hash;
                }
                if ("credential_id" in data && data.credential_id != undefined) {
                    this.credential_id = data.credential_id;
                }
            }
        }
        get document_hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set document_hash(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get credential_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set credential_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            document_hash?: string;
            credential_id?: string;
        }): DocumentVerificationRequest {
            const message = new DocumentVerificationRequest({});
            if (data.document_hash != null) {
                message.document_hash = data.document_hash;
            }
            if (data.credential_id != null) {
                message.credential_id = data.credential_id;
            }
            return message;
        }
        toObject() {
            const data: {
                document_hash?: string;
                credential_id?: string;
            } = {};
            if (this.document_hash != null) {
                data.document_hash = this.document_hash;
            }
            if (this.credential_id != null) {
                data.credential_id = this.credential_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.document_hash.length)
                writer.writeString(1, this.document_hash);
            if (this.credential_id.length)
                writer.writeString(2, this.credential_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DocumentVerificationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DocumentVerificationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.document_hash = reader.readString();
                        break;
                    case 2:
                        message.credential_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DocumentVerificationRequest {
            return DocumentVerificationRequest.deserialize(bytes);
        }
    }
    export class DocumentVerificationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            document_verified?: boolean;
            verified_at?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("document_verified" in data && data.document_verified != undefined) {
                    this.document_verified = data.document_verified;
                }
                if ("verified_at" in data && data.verified_at != undefined) {
                    this.verified_at = data.verified_at;
                }
            }
        }
        get document_verified() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set document_verified(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get verified_at() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 2) as dependency_1.google.protobuf.Timestamp;
        }
        set verified_at(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_verified_at() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            document_verified?: boolean;
            verified_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): DocumentVerificationResponse {
            const message = new DocumentVerificationResponse({});
            if (data.document_verified != null) {
                message.document_verified = data.document_verified;
            }
            if (data.verified_at != null) {
                message.verified_at = dependency_1.google.protobuf.Timestamp.fromObject(data.verified_at);
            }
            return message;
        }
        toObject() {
            const data: {
                document_verified?: boolean;
                verified_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.document_verified != null) {
                data.document_verified = this.document_verified;
            }
            if (this.verified_at != null) {
                data.verified_at = this.verified_at.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.document_verified != false)
                writer.writeBool(1, this.document_verified);
            if (this.has_verified_at)
                writer.writeMessage(2, this.verified_at, () => this.verified_at.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DocumentVerificationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DocumentVerificationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.document_verified = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.verified_at, () => message.verified_at = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DocumentVerificationResponse {
            return DocumentVerificationResponse.deserialize(bytes);
        }
    }
    export class CrossBoardVerificationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential_id?: string;
            target_boards?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential_id" in data && data.credential_id != undefined) {
                    this.credential_id = data.credential_id;
                }
                if ("target_boards" in data && data.target_boards != undefined) {
                    this.target_boards = data.target_boards;
                }
            }
        }
        get credential_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set credential_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get target_boards() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set target_boards(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            credential_id?: string;
            target_boards?: string[];
        }): CrossBoardVerificationRequest {
            const message = new CrossBoardVerificationRequest({});
            if (data.credential_id != null) {
                message.credential_id = data.credential_id;
            }
            if (data.target_boards != null) {
                message.target_boards = data.target_boards;
            }
            return message;
        }
        toObject() {
            const data: {
                credential_id?: string;
                target_boards?: string[];
            } = {};
            if (this.credential_id != null) {
                data.credential_id = this.credential_id;
            }
            if (this.target_boards != null) {
                data.target_boards = this.target_boards;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.credential_id.length)
                writer.writeString(1, this.credential_id);
            if (this.target_boards.length)
                writer.writeRepeatedString(2, this.target_boards);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CrossBoardVerificationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CrossBoardVerificationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.credential_id = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CrossBoardVerificationRequest {
            return CrossBoardVerificationRequest.deserialize(bytes);
        }
    }
    export class CrossBoardVerificationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            cross_board_verified?: boolean;
            verification_timestamp?: dependency_1.google.protobuf.Timestamp;
            board_results?: Map<string, boolean>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cross_board_verified" in data && data.cross_board_verified != undefined) {
                    this.cross_board_verified = data.cross_board_verified;
                }
                if ("verification_timestamp" in data && data.verification_timestamp != undefined) {
                    this.verification_timestamp = data.verification_timestamp;
                }
                if ("board_results" in data && data.board_results != undefined) {
                    this.board_results = data.board_results;
                }
            }
            if (!this.board_results)
                this.board_results = new Map();
        }
        get cross_board_verified() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set cross_board_verified(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get verification_timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 2) as dependency_1.google.protobuf.Timestamp;
        }
        set verification_timestamp(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_verification_timestamp() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get board_results() {
            return pb_1.Message.getField(this, 3) as any as Map<string, boolean>;
        }
        set board_results(value: Map<string, boolean>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        static fromObject(data: {
            cross_board_verified?: boolean;
            verification_timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            board_results?: {
                [key: string]: boolean;
            };
        }): CrossBoardVerificationResponse {
            const message = new CrossBoardVerificationResponse({});
            if (data.cross_board_verified != null) {
                message.cross_board_verified = data.cross_board_verified;
            }
            if (data.verification_timestamp != null) {
                message.verification_timestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.verification_timestamp);
            }
            if (typeof data.board_results == "object") {
                message.board_results = new Map(Object.entries(data.board_results));
            }
            return message;
        }
        toObject() {
            const data: {
                cross_board_verified?: boolean;
                verification_timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                board_results?: {
                    [key: string]: boolean;
                };
            } = {};
            if (this.cross_board_verified != null) {
                data.cross_board_verified = this.cross_board_verified;
            }
            if (this.verification_timestamp != null) {
                data.verification_timestamp = this.verification_timestamp.toObject();
            }
            if (this.board_results != null) {
                data.board_results = (Object.fromEntries)(this.board_results);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cross_board_verified != false)
                writer.writeBool(1, this.cross_board_verified);
            if (this.has_verification_timestamp)
                writer.writeMessage(2, this.verification_timestamp, () => this.verification_timestamp.serialize(writer));
            for (const [key, value] of this.board_results) {
                writer.writeMessage(3, this.board_results, () => {
                    writer.writeString(1, key);
                    writer.writeBool(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CrossBoardVerificationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CrossBoardVerificationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cross_board_verified = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.verification_timestamp, () => message.verification_timestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.board_results as any, reader, reader.readString, reader.readBool));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CrossBoardVerificationResponse {
            return CrossBoardVerificationResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedVerificationServiceService {
        static definition = {
            VerifyCredential: {
                path: "/verification.VerificationService/VerifyCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VerificationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VerificationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VerificationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VerificationResponse.deserialize(new Uint8Array(bytes))
            },
            BatchVerifyCredentials: {
                path: "/verification.VerificationService/BatchVerifyCredentials",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BatchVerificationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BatchVerificationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BatchVerificationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BatchVerificationResponse.deserialize(new Uint8Array(bytes))
            },
            GetCredentialStatus: {
                path: "/verification.VerificationService/GetCredentialStatus",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CredentialStatusRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CredentialStatusRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CredentialStatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CredentialStatusResponse.deserialize(new Uint8Array(bytes))
            },
            SearchCredentials: {
                path: "/verification.VerificationService/SearchCredentials",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SearchRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SearchRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SearchResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SearchResponse.deserialize(new Uint8Array(bytes))
            },
            VerifyDocument: {
                path: "/verification.VerificationService/VerifyDocument",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DocumentVerificationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DocumentVerificationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DocumentVerificationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DocumentVerificationResponse.deserialize(new Uint8Array(bytes))
            },
            CrossBoardVerify: {
                path: "/verification.VerificationService/CrossBoardVerify",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CrossBoardVerificationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CrossBoardVerificationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CrossBoardVerificationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CrossBoardVerificationResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract VerifyCredential(call: grpc_1.ServerUnaryCall<VerificationRequest, VerificationResponse>, callback: grpc_1.sendUnaryData<VerificationResponse>): void;
        abstract BatchVerifyCredentials(call: grpc_1.ServerUnaryCall<BatchVerificationRequest, BatchVerificationResponse>, callback: grpc_1.sendUnaryData<BatchVerificationResponse>): void;
        abstract GetCredentialStatus(call: grpc_1.ServerUnaryCall<CredentialStatusRequest, CredentialStatusResponse>, callback: grpc_1.sendUnaryData<CredentialStatusResponse>): void;
        abstract SearchCredentials(call: grpc_1.ServerUnaryCall<SearchRequest, SearchResponse>, callback: grpc_1.sendUnaryData<SearchResponse>): void;
        abstract VerifyDocument(call: grpc_1.ServerUnaryCall<DocumentVerificationRequest, DocumentVerificationResponse>, callback: grpc_1.sendUnaryData<DocumentVerificationResponse>): void;
        abstract CrossBoardVerify(call: grpc_1.ServerUnaryCall<CrossBoardVerificationRequest, CrossBoardVerificationResponse>, callback: grpc_1.sendUnaryData<CrossBoardVerificationResponse>): void;
    }
    export class VerificationServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedVerificationServiceService.definition, "VerificationService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        VerifyCredential: GrpcUnaryServiceInterface<VerificationRequest, VerificationResponse> = (message: VerificationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<VerificationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<VerificationResponse>, callback?: grpc_1.requestCallback<VerificationResponse>): grpc_1.ClientUnaryCall => {
            return super.VerifyCredential(message, metadata, options, callback);
        };
        BatchVerifyCredentials: GrpcUnaryServiceInterface<BatchVerificationRequest, BatchVerificationResponse> = (message: BatchVerificationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BatchVerificationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BatchVerificationResponse>, callback?: grpc_1.requestCallback<BatchVerificationResponse>): grpc_1.ClientUnaryCall => {
            return super.BatchVerifyCredentials(message, metadata, options, callback);
        };
        GetCredentialStatus: GrpcUnaryServiceInterface<CredentialStatusRequest, CredentialStatusResponse> = (message: CredentialStatusRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CredentialStatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CredentialStatusResponse>, callback?: grpc_1.requestCallback<CredentialStatusResponse>): grpc_1.ClientUnaryCall => {
            return super.GetCredentialStatus(message, metadata, options, callback);
        };
        SearchCredentials: GrpcUnaryServiceInterface<SearchRequest, SearchResponse> = (message: SearchRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SearchResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SearchResponse>, callback?: grpc_1.requestCallback<SearchResponse>): grpc_1.ClientUnaryCall => {
            return super.SearchCredentials(message, metadata, options, callback);
        };
        VerifyDocument: GrpcUnaryServiceInterface<DocumentVerificationRequest, DocumentVerificationResponse> = (message: DocumentVerificationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DocumentVerificationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DocumentVerificationResponse>, callback?: grpc_1.requestCallback<DocumentVerificationResponse>): grpc_1.ClientUnaryCall => {
            return super.VerifyDocument(message, metadata, options, callback);
        };
        CrossBoardVerify: GrpcUnaryServiceInterface<CrossBoardVerificationRequest, CrossBoardVerificationResponse> = (message: CrossBoardVerificationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CrossBoardVerificationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CrossBoardVerificationResponse>, callback?: grpc_1.requestCallback<CrossBoardVerificationResponse>): grpc_1.ClientUnaryCall => {
            return super.CrossBoardVerify(message, metadata, options, callback);
        };
    }
}
